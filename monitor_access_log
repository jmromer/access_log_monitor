#!/usr/bin/env python3

import click

from access_log_monitor.log_analyzer import LogAnalyzer
from access_log_monitor.log_manager import LogManager
from access_log_monitor.log_monitor import perform_monitoring
from access_log_monitor.log_monitors import (AlertingMonitor, LogMonitor,
                                             ReportingMonitor)
from access_log_monitor.log_store import DequeDataStore

DEFAULT_LOG = "/var/log/access.log"


@click.command()
@click.option(
    "--logfile",
    default=DEFAULT_LOG,
    help=f"An absolute path to the access log to monitor. Default: {DEFAULT_LOG}"
)
@click.option(
    "--alerting_threshold",
    default=10,
    help="Alert when traffic exceeds x requests per second. Default: 10.")
@click.option(
    "--alerting_interval",
    default=2,
    help="Alert when traffic exceeds threshold every x mins. Default: 2.")
@click.option(
    "--reporting_interval",
    default=10,
    help="Report traffic statistics every x seconds. Default: 10")
def monitor_access_log(logfile: str, alerting_threshold: int,
                       alerting_interval: int, reporting_interval: int):
    """
    Continuously monitor the log file at path `logfile`.

    Generate summary statistics at set intervals (default: every 2 mins)

    Issue an alert if traffic exceeds a given threshold (default: 10 requests
    per second on average) over the past specified number of minutes (default: 2 mins).
    """
    log_mgr = LogManager(path=logfile)
    in_memory_datastore = DequeDataStore()
    analysis_manager = LogAnalyzer(in_memory_datastore)

    reporting = ReportingMonitor(reporting_interval)
    alerting = AlertingMonitor(
        threshold_rps=alerting_threshold,
        interval_sec=(alerting_interval * 60))

    print(f"[INFO] Monitoring access log at {logfile}\n")

    while True:
        perform_monitoring(
            log=log_mgr,
            datastore=in_memory_datastore,
            analyzer=analysis_manager,
            monitors=[reporting, alerting])


monitor_access_log()
